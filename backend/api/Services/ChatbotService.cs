using api.DTOs.Chatbot;
using api.Interfaces.Repositories;
using api.Interfaces.Services;
using System.Text;
using System.Text.Json;

namespace api.Services
{
    public class ChatbotService : IChatbotService
    {
        private readonly IProductRepository _productRepository;
        private readonly IBrandRepository _brandRepository;
        private readonly IProductLineRepository _productLineRepository;
        private readonly IDiscountRepository _discountRepository;
        private readonly HttpClient _httpClient;
        private readonly IConfiguration _configuration;

        public ChatbotService(
            IProductRepository productRepository,
            IBrandRepository brandRepository,
            IProductLineRepository productLineRepository,
            IDiscountRepository discountRepository,
            HttpClient httpClient,
            IConfiguration configuration)
        {
            _productRepository = productRepository;
            _brandRepository = brandRepository;
            _productLineRepository = productLineRepository;
            _discountRepository = discountRepository;
            _httpClient = httpClient;
            _configuration = configuration;
        }

        public async Task<ChatResponseDTO> ProcessMessageAsync(ChatMessageDTO messageDTO)
        {
            try
            {
                // L·∫•y context s·∫£n ph·∫©m
                var context = await GetProductContextAsync();
                
                // T·∫°o response t·ª´ OpenAI ho·∫∑c logic t√πy ch·ªânh
                var content = await GenerateResponseAsync(messageDTO.Message, context);

                return new ChatResponseDTO
                {
                    Id = Guid.NewGuid().ToString(),
                    Content = content,
                    Timestamp = DateTime.UtcNow,
                    IsUser = false,
                    IsError = false,
                    SuggestedActions = GenerateSuggestedActions(messageDTO.Message)
                };
            }            catch (Exception)
            {
                return new ChatResponseDTO
                {
                    Id = Guid.NewGuid().ToString(),
                    Content = "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá support ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.",
                    Timestamp = DateTime.UtcNow,
                    IsUser = false,
                    IsError = true
                };
            }
        }

        public async Task<string> GenerateResponseAsync(string message, ProductContextDTO? context = null)
        {
            var openAiApiKey = _configuration["OpenAI:ApiKey"];
            
            if (string.IsNullOrEmpty(openAiApiKey))
            {
                return GenerateFallbackResponse(message, context);
            }

            try
            {
                var systemPrompt = BuildSystemPrompt(context);
                var requestBody = new
                {
                    model = "gpt-3.5-turbo",
                    messages = new[]
                    {
                        new { role = "system", content = systemPrompt },
                        new { role = "user", content = message }
                    },
                    max_tokens = 500,
                    temperature = 0.7
                };

                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {openAiApiKey}");

                var json = JsonSerializer.Serialize(requestBody);
                var httpContent = new StringContent(json, Encoding.UTF8, "application/json");

                var response = await _httpClient.PostAsync("https://api.openai.com/v1/chat/completions", httpContent);
                
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var responseData = JsonSerializer.Deserialize<dynamic>(responseContent);
                    
                    // Parse response and extract content
                    // This is simplified - you might want to use a proper JSON library
                    return ExtractContentFromOpenAIResponse(responseContent);
                }
                else
                {
                    return GenerateFallbackResponse(message, context);
                }
            }
            catch
            {
                return GenerateFallbackResponse(message, context);
            }
        }

        public List<string> GetQuickQuestions()
        {
            return new List<string>
            {
                "L√†m sao ƒë·ªÉ ƒë·∫∑t h√†ng?",
                "C√≥ nh·ªØng ph∆∞∆°ng th·ª©c thanh to√°n n√†o?",
                "C√≥ khuy·∫øn m√£i g√¨ hi·ªán t·∫°i?",
                "S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t l√† g√¨?",
                "C√≥ bao nhi√™u nh√£n h√†ng?",
                "IPhone hi·ªán t·∫°i c√≥ bao nhi√™u lo·∫°i s·∫£n ph·∫©m?",
            };
        }

        public async Task<ProductContextDTO> GetProductContextAsync()
        {
            try
            {               
                var products = await _productRepository.GetAllAsync();
                var topProducts = products
                    .Where(p => p.IsActive) 
                    .OrderBy(p => p.Name) 
                    .Take(10)
                    .Select(p => new ProductSummaryDTO
                    {
                        Id = p.Id,
                        Name = p.Name,
                        Price = p.SalePrice,
                        Brand = p.ProductLine?.Brand?.Name ?? "N/A",
                        Category = p.ProductLine?.Name ?? "N/A",
                        IsAvailable = p.IsActive,
                        ImageUrl = p.Colors.SelectMany(c => c.Images).FirstOrDefault()?.ImagePath
                    }).ToList();// L·∫•y danh s√°ch brands
                var brands = await _brandRepository.GetBrandsAsync(new api.Queries.BrandQuery());
                var brandNames = brands.Where(b => b.IsActive).Select(b => b.Name).ToList();                // L·∫•y danh s√°ch product lines (categories)
                var productLines = await _productLineRepository.GetProductLinesAsync(new api.Queries.ProductLineQuery());
                var categoryNames = productLines.Where(pl => pl.IsActive).Select(pl => pl.Name).ToList();                // L·∫•y khuy·∫øn m√£i hi·ªán t·∫°i
                var discounts = await _discountRepository.GetAllDiscountsAsync();                var currentPromotions = discounts.Where(d => d.StartDate <= DateTime.UtcNow && d.EndDate >= DateTime.UtcNow)
                    .Select(d => new PromotionDTO
                    {
                        Title = $"Gi·∫£m gi√° {(d.DiscountPercentage > 0 ? $"{d.DiscountPercentage}%" : $"{d.DiscountAmount:N0}ƒë")}",
                        Description = $"√Åp d·ª•ng t·ª´ {d.StartDate:dd/MM/yyyy} ƒë·∫øn {d.EndDate:dd/MM/yyyy}",
                        DiscountPercent = d.DiscountPercentage,
                        DiscountAmount = d.DiscountAmount
                    }).ToList();

                return new ProductContextDTO
                {
                    AvailableProducts = topProducts,
                    Brands = brandNames,
                    Categories = categoryNames,
                    CurrentPromotions = currentPromotions
                };
            }
            catch
            {
                return new ProductContextDTO
                {
                    AvailableProducts = new List<ProductSummaryDTO>(),
                    Brands = new List<string>(),
                    Categories = new List<string>(),
                    CurrentPromotions = new List<PromotionDTO>()
                };
            }
        }

        private string BuildSystemPrompt(ProductContextDTO? context)
        {
            var prompt = @"B·∫°n l√† SmartBuy Assistant, m·ªôt tr·ª£ l√Ω AI th√¥ng minh cho website th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ SmartBuy. 

Nhi·ªám v·ª• c·ªßa b·∫°n:
1. T∆∞ v·∫•n s·∫£n ph·∫©m v√† gi√∫p kh√°ch h√†ng mua s·∫Øm
2. H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng website
3. Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ ƒë∆°n h√†ng, thanh to√°n, v·∫≠n chuy·ªÉn
4. H·ªó tr·ª£ kh√°ch h√†ng m·ªôt c√°ch th√¢n thi·ªán v√† chuy√™n nghi·ªáp

Quy t·∫Øc tr·∫£ l·ªùi:
- Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
- Ng·∫Øn g·ªçn, s√∫c t√≠ch nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin
- Th√¢n thi·ªán v√† l·ªãch s·ª±
- N·∫øu kh√¥ng bi·∫øt th√¥ng tin c·ª• th·ªÉ, h√£y h∆∞·ªõng d·∫´n kh√°ch h√†ng li√™n h·ªá support
- G·ª£i √Ω s·∫£n ph·∫©m d·ª±a tr√™n nhu c·∫ßu kh√°ch h√†ng";

            if (context != null)
            {
                prompt += "\n\nTh√¥ng tin s·∫£n ph·∫©m hi·ªán t·∫°i:\n";
                
                if (context.AvailableProducts?.Any() == true)
                {
                    prompt += "S·∫£n ph·∫©m n·ªïi b·∫≠t:\n";
                    foreach (var product in context.AvailableProducts.Take(5))
                    {
                        prompt += $"- {product.Name} ({product.Brand}) - {product.Price:N0}ƒë\n";
                    }
                }

                if (context.Brands?.Any() == true)
                {
                    prompt += $"\nTh∆∞∆°ng hi·ªáu c√≥ s·∫µn: {string.Join(", ", context.Brands)}\n";
                }

                if (context.CurrentPromotions?.Any() == true)
                {
                    prompt += "\nKhuy·∫øn m√£i hi·ªán t·∫°i:\n";
                    foreach (var promo in context.CurrentPromotions.Take(3))
                    {
                        prompt += $"- {promo.Title}: {promo.Description}\n";
                    }
                }
            }

            return prompt;
        }        private string GenerateFallbackResponse(string message, ProductContextDTO? context)
        {
            var lowerMessage = message.ToLower();

            // üè∑Ô∏è C·ª≠a h√†ng c√≥ bao nhi√™u nh√£n h√†ng/brand
            if ((lowerMessage.Contains("nh√£n h√†ng") || lowerMessage.Contains("brand") || lowerMessage.Contains("th∆∞∆°ng hi·ªáu")) &&
                lowerMessage.Contains("bao nhi√™u"))
            {
                var brandCount = context?.Brands?.Count ?? 0;
                return $"üè∑Ô∏è Hi·ªán t·∫°i c·ª≠a h√†ng SmartBuy c√≥ **{brandCount} nh√£n h√†ng/brand** kh√°c nhau.\n\nC√°c th∆∞∆°ng hi·ªáu bao g·ªìm: {string.Join(", ", context?.Brands?.Take(5) ?? new List<string>())}{(brandCount > 5 ? "..." : "")}";
            }

            // üìÇ C·ª≠a h√†ng c√≥ bao nhi√™u d√≤ng s·∫£n ph·∫©m/productline
            if ((lowerMessage.Contains("d√≤ng s·∫£n ph·∫©m") || lowerMessage.Contains("productline") || lowerMessage.Contains("danh m·ª•c")) &&
                lowerMessage.Contains("bao nhi√™u"))
            {
                var categoryCount = context?.Categories?.Count ?? 0;
                return $"üìÇ Hi·ªán t·∫°i c·ª≠a h√†ng SmartBuy c√≥ **{categoryCount} d√≤ng s·∫£n ph·∫©m/productline** kh√°c nhau.\n\nC√°c danh m·ª•c bao g·ªìm: {string.Join(", ", context?.Categories?.Take(5) ?? new List<string>())}{(categoryCount > 5 ? "..." : "")}";
            }            // üì± iPhone hi·ªán t·∫°i c√≥ bao nhi√™u lo·∫°i s·∫£n ph·∫©m
            if (lowerMessage.Contains("iphone") && 
                (lowerMessage.Contains("bao nhi√™u") || lowerMessage.Contains("c√≥ bao nhi√™u")) &&
                (lowerMessage.Contains("lo·∫°i") || lowerMessage.Contains("s·∫£n ph·∫©m") || lowerMessage.Contains("model")))
            {
                var iphoneProducts = context?.AvailableProducts?.Where(p => p.Name.ToLower().Contains("iphone")).ToList();
                var iphoneCount = iphoneProducts?.Count ?? 0;
                
                if (iphoneCount > 0 && iphoneProducts != null)
                {
                    var iphoneText = $"üì± Hi·ªán t·∫°i c·ª≠a h√†ng c√≥ **{iphoneCount} lo·∫°i s·∫£n ph·∫©m iPhone**:\n\n";
                    foreach (var iphone in iphoneProducts.Take(10))
                    {
                        iphoneText += $"‚Ä¢ {iphone.Name} - {iphone.Price:N0}ƒë\n";
                    }
                    return iphoneText + "\nB·∫°n quan t√¢m ƒë·∫øn iPhone n√†o c·ª• th·ªÉ kh√¥ng?";
                }
                return "üì± Hi·ªán t·∫°i c·ª≠a h√†ng ch∆∞a c√≥ s·∫£n ph·∫©m iPhone n√†o. Vui l√≤ng quay l·∫°i sau!";
            }

            // üèÜ Cho t√¥i nh·ªØng s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
            if (lowerMessage.Contains("s·∫£n ph·∫©m") && (lowerMessage.Contains("b√°n ch·∫°y") || lowerMessage.Contains("ph·ªï bi·∫øn") || lowerMessage.Contains("n·ªïi b·∫≠t")))
            {
                var products = context?.AvailableProducts;
                if (products?.Any() == true)
                {
                    var productText = "üèÜ S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t t·∫°i SmartBuy:\n\n";
                    foreach (var product in products.Take(5))
                    {
                        productText += $"üì± {product.Name}\n";
                        productText += $"   Th∆∞∆°ng hi·ªáu: {product.Brand}\n";
                        productText += $"   Gi√°: {product.Price:N0}ƒë\n";
                        productText += $"   Danh m·ª•c: {product.Category}\n\n";
                    }
                    return productText + "B·∫°n mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†o kh√¥ng?";
                }
                return "Hi·ªán t·∫°i ch√∫ng t√¥i ƒëang c·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m b√°n ch·∫°y. Vui l√≤ng quay l·∫°i sau!";
            }

            // üí≥ C√≥ bao nhi√™u c√°ch thanh to√°n
            if ((lowerMessage.Contains("bao nhi√™u") || lowerMessage.Contains("c√≥ bao nhi√™u")) &&
                (lowerMessage.Contains("c√°ch thanh to√°n") || lowerMessage.Contains("ph∆∞∆°ng th·ª©c thanh to√°n") || lowerMessage.Contains("thanh to√°n")))
            {
                return "üí≥ SmartBuy h·ªó tr·ª£ **4 ph∆∞∆°ng th·ª©c thanh to√°n**:\n\n" +
                       "1Ô∏è‚É£ Thanh to√°n khi nh·∫≠n h√†ng (COD)\n" +
                       "2Ô∏è‚É£ Chuy·ªÉn kho·∫£n ng√¢n h√†ng\n" +
                       "3Ô∏è‚É£ V√≠ ƒëi·ªán t·ª≠ (Momo, ZaloPay)\n" +
                       "4Ô∏è‚É£ Th·∫ª t√≠n d·ª•ng/ghi n·ª£\n\n" +
                       "T·∫•t c·∫£ ƒë·ªÅu an to√†n v√† b·∫£o m·∫≠t! B·∫°n mu·ªën bi·∫øt th√™m chi ti·∫øt v·ªÅ ph∆∞∆°ng th·ª©c n√†o kh√¥ng?";
            }

            if (lowerMessage.Contains("ƒë·∫∑t h√†ng") || lowerMessage.Contains("mua"))
            {
                return "ƒê·ªÉ ƒë·∫∑t h√†ng, b·∫°n c√≥ th·ªÉ:\n1. Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng\n2. Ch·ªçn 'Thanh to√°n'\n3. ƒêi·ªÅn th√¥ng tin giao h√†ng\n4. Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n\n5. X√°c nh·∫≠n ƒë∆°n h√†ng\n\nB·∫°n c√≥ c·∫ßn h·ªó tr·ª£ g√¨ th√™m kh√¥ng?";
            }

            if (lowerMessage.Contains("giao h√†ng") || lowerMessage.Contains("ship"))
            {
                return "Th·ªùi gian giao h√†ng:\n- N·ªôi th√†nh: 1-2 ng√†y\n- Ngo·∫°i th√†nh: 2-3 ng√†y\n- T·ªânh xa: 3-5 ng√†y\n\nPh√≠ ship t·ª´ 30.000ƒë t√πy theo khu v·ª±c. Mi·ªÖn ph√≠ ship cho ƒë∆°n h√†ng t·ª´ 500.000ƒë.";
            }

            if (lowerMessage.Contains("thanh to√°n"))
            {
                return "SmartBuy h·ªó tr·ª£ c√°c ph∆∞∆°ng th·ª©c thanh to√°n:\n- Thanh to√°n khi nh·∫≠n h√†ng (COD)\n- Chuy·ªÉn kho·∫£n ng√¢n h√†ng\n- V√≠ ƒëi·ªán t·ª≠ (Momo, ZaloPay)\n- Th·∫ª t√≠n d·ª•ng/ghi n·ª£\n\nT·∫•t c·∫£ ƒë·ªÅu an to√†n v√† b·∫£o m·∫≠t.";
            }           

            if (lowerMessage.Contains("khuy·∫øn m√£i") || lowerMessage.Contains("gi·∫£m gi√°"))
            {
                var promotions = context?.CurrentPromotions;
                if (promotions?.Any() == true)
                {
                    var promoText = "Khuy·∫øn m√£i hi·ªán t·∫°i:\n";
                    foreach (var promo in promotions.Take(3))
                    {
                        promoText += $"üéÅ {promo.Title}: {promo.Description}\n";
                    }
                    return promoText + "\nH√£y nhanh tay ƒë·ªÉ kh√¥ng b·ªè l·ª°!";
                }
                return "Hi·ªán t·∫°i SmartBuy c√≥ nhi·ªÅu ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i h·∫•p d·∫´n. Vui l√≤ng ki·ªÉm tra trang ch·ªß ƒë·ªÉ xem chi ti·∫øt c√°c ∆∞u ƒë√£i m·ªõi nh·∫•t!";
            }

            // Response m·∫∑c ƒë·ªãnh
            return "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi SmartBuy! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n" +
                   "üõí T∆∞ v·∫•n s·∫£n ph·∫©m\n" +
                   "üì¶ H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng\n" +
                   "üöö Th√¥ng tin giao h√†ng\n" +
                   "üí≥ Ph∆∞∆°ng th·ª©c thanh to√°n\n" +
                   "üîÑ Ch√≠nh s√°ch ƒë·ªïi tr·∫£\n\n" +
                   "B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ c·ª• th·ªÉ kh√¥ng?";
        }

        private List<string> GenerateSuggestedActions(string message)
        {
            var lowerMessage = message.ToLower();
            var suggestions = new List<string>();

            if (lowerMessage.Contains("s·∫£n ph·∫©m") || lowerMessage.Contains("t∆∞ v·∫•n"))
            {
                suggestions.AddRange(new[] { "Xem s·∫£n ph·∫©m b√°n ch·∫°y", "T√¨m theo th∆∞∆°ng hi·ªáu", "So s√°nh gi√°" });
            }
            else if (lowerMessage.Contains("ƒë·∫∑t h√†ng"))
            {
                suggestions.AddRange(new[] { "H∆∞·ªõng d·∫´n thanh to√°n", "Ch√≠nh s√°ch giao h√†ng", "Theo d√µi ƒë∆°n h√†ng" });
            }
            else
            {
                suggestions.AddRange(new[] { "S·∫£n ph·∫©m m·ªõi", "Khuy·∫øn m√£i hot", "H·ªó tr·ª£ ƒë·∫∑t h√†ng" });
            }

            return suggestions.Take(3).ToList();
        }

        private string ExtractContentFromOpenAIResponse(string responseJson)
        {
            try
            {
                using var document = JsonDocument.Parse(responseJson);
                var choices = document.RootElement.GetProperty("choices");
                if (choices.GetArrayLength() > 0)
                {
                    var firstChoice = choices[0];
                    var message = firstChoice.GetProperty("message");
                    var content = message.GetProperty("content").GetString();
                    return content ?? "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.";
                }
            }
            catch
            {
                // Fall through to default response
            }

            return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y l√∫c n√†y.";
        }
    }
}
